@startuml
!include style.puml
skinparam arrowThickness 1.1
skinparam arrowColor LOGIC_COLOR_T4
skinparam classBackgroundColor LOGIC_COLOR

package Logic {

package Parser {
Interface Parser <<Interface>>
Class UserInputParser
Class XYCommandParser
Class TimeSlotParser
Class CliSyntax
Class ParserUtil
Class ArgumentMultimap
Class ArgumentTokenizer
Class Prefix
}

package Command {
Class XYCommand
Class CommandResult
Class "{abstract}\nCommand" as Command
}

Interface Logic <<Interface>>
Class LogicManager
}

package Model{
Class HiddenModel #FFFFFF
}

package Storage {
Class HiddenStorage #FFFFFF
}

Class HiddenOutside #FFFFFF
HiddenOutside ..> Logic

LogicManager .up.|> Logic
LogicManager -->"1" UserInputParser
UserInputParser .left.> XYCommandParser: creates >
UserInputParser --> Storage

XYCommandParser ..> XYCommand : creates >
XYCommandParser .up.|> Parser
XYCommandParser ..> TimeSlotParser
TimeSlotParser -right-> CliSyntax
CliSyntax -right[hidden]- ParserUtil
XYCommandParser ..> ArgumentMultimap
ArgumentMultimap ..> Prefix
XYCommandParser ..> ArgumentTokenizer
ArgumentTokenizer .left.> ArgumentMultimap
XYCommandParser ..> CliSyntax
CliSyntax --> Prefix
XYCommandParser ..> ParserUtil
ArgumentTokenizer ..> Prefix
XYCommand -up-|> Command
LogicManager .left.> Command : executes >

LogicManager -right-> Storage

LogicManager --> Model
Command ..> Storage
note bottom of XYCommand
    X = Add, Clear, Delete, Edit, Find & List
    Y = Appointment, Doctor & Patient
    XYCommand = AddPatientCommand,
    deleteDoctorCommand, etc.
    Applies to XYCommandParser too.
end note

Logic ..> CommandResult
LogicManager .down.> CommandResult
Command .up.> CommandResult
CommandResult -right[hidden]- Parser
@enduml
